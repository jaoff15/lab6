/*
 * led_matrix.c
 *
 *  Created on: Apr 2, 2019
 *      Author: jacoboffersen
 */

#include "led_matrix.h"



// Initialize the LED matrix
void initLedMatrix(){
	clearMemory();
}

// Function to reset memory
void clearMemory(){
	for(u8 col = 0; col < 8; col++){
		for(u8 row = 0; row < 8; row++){
			setPixelValueOnDevice(col, row, 0, 0, 0);
		}
	}
}




void setPixelValue(u8 x, u8 y, u8 r, u8 g, u8 b){
	matrix[x][y][RED] = r;
	matrix[x][y][GREEN] = g;
	matrix[x][y][BLUE] = b;
}

void setPixel(position_t pos, color_t col){
	matrix[pos.x][pos.y][RED] = col.r;
	matrix[pos.x][pos.y][GREEN] = col.g;
	matrix[pos.x][pos.y][BLUE] = col.b;
}


void writePixelToDevice(position_t pos){
	u8 r = matrix[pos.x,pos.y][RED];
	u8 g = matrix[pos.x,pos.y][GREEN];
	u8 b = matrix[pos.x,pos.y][BLUE];
	u32 addr = XPAR_BRAM_0_BASEADDR + x*4 + y*32;
	u32 value = (r << 16) + (g << 8) + b;
	ledMatrixOut(addr, value);
}


// Function to set the color of one pixel on the device
void setPixelValueOnDevice(u8 x, u8 y, u8 r, u8 g, u8 b){
	u32 addr = XPAR_BRAM_0_BASEADDR + x*4 + y*32;
	u32 value = (r << 16) + (g << 8) + b;
	ledMatrixOut(addr, value);
}

// Function to set the color of one pixel on the device
void setPixelOnDevice(position_t pos, color_t col){
	u32 addr = XPAR_BRAM_0_BASEADDR + pos.x*4 + pos.y*32;
	u32 value = (col.r << 16) + (col.g << 8) + col.b;
	ledMatrixOut(addr, value);
}


// Write pixel value to the LED matrix
void ledMatrixOut(u32 addr, u32 data){
	Xil_Out32(addr, data);
}


